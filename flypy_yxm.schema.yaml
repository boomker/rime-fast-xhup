# Rime schema
# encoding: utf-8

schema:
  schema_id: flypy_yxm
  name: 小鹤音形
  version: "0.20"
  author:
    - 流星追月 <zhuangzhemin@qq.com>
  description: |
    小鹤音形
    - Flypy by 小鹤
    - Rime schema by 佛振 <chen.sst@gmail.com>
  # dependencies:
  #   - flypy_chars

switches:
  - name: ascii_mode
    reset: 1
    states: [ 中, En ]
  - name: full_shape
    states: [ ◖, ● ]
  - name: simplification
    reset: 1
    states: [ 繁, 简 ]
  - name: ascii_punct
    states: [ 。, ． ]
  - options: [ gbk+emoji, utf8 ]
    states: [ GBK, UTF-8 ]
    reset: 1

engine:
  processors:
    - ascii_composer
    - recognizer
    - key_binder
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - punct_segmentor
    - fallback_segmentor
  translators:
    - punct_translator
    - table_translator
    # - script_translator
    - reverse_lookup_translator
  filters:
    # - lua_filter@long_word_filter
    - simplifier
    - uniquifier
    - charset_filter@gb2312+emoji
    - charset_filter

speller:
  alphabet: "zyxwvutsrqponmlkjihgfedcba`["
  delimiter: " '"
  auto_select: true
  max_code_length: 4
  algebra:
    # - erase/^(\w+);(\w)(\w)$/  # erase single chars
    - derive/^l([uom])$/n$1/                            # l -> n
    - derive/^n([uom])$/l$1/                            # l -> n
    - derive/^([jqxy])v/$1u/
    - derive/^([jqxy])u/$1v/
    - derive/^(v)([^f])/z$2/                            # zh => z
    - derive/^(i)(.)/c$2/                               # ch => c
    - derive/^(u)([^fgnm])/s$2/                         # sh => s
    - derive/^(z)(.)/v$2/                               # z => zh
    - derive/^(c)(.)/i$2/                               # c => ch
    - derive/^(s)([^fgnm])/u$2/                         # s => sh
    - derive/^([zcviu])f/$1g/                           # [zcs][h]en 可以通过 [zcs][h]eng 打出
    - derive/^([cviu])g/$1f/                            # [zcs][h]eng 可以通过 [zcs][h]en 打出
    - derive/^([typdjxbm])k/$1b/                        # ing 可以通过 in 打出
    - derive/^([typdjxbmn])b/$1k/                       # in 可以通过 ing 打出
    - xlit/QWRTYUIOPSDFGHJKLZXCVBNM/qwrtyuiopsdfghjklzxcvbnm/
    # - derive/^(\w+);(\w)(\w)$/$1$2$3/  # AB`D
    # - derive/^(\w+);(\w)(\w)$/$1$2/  # ABC`
    # - derive/^(\w+);(\w)(\w)$/$1/   # AB``
    # - xform/^(\w+);(\w)(\w)$/$2$3/ # ``CD

    # - derive/^(\w+);(\w)(\w)$/$1$2`/  # ABC`
    # - derive/^(\w+);(\w)(\w)$/$1`$3/  # AB`D
    # - derive/^(\w+);(\w)(\w)$/$1``/   # AB``
    # - xform/^(\w+);(\w)(\w)$/``$2$3/ # ``CD

translator:
  dictionary: flypy_phrase_yxm
  prism: flypy_phrase_yxm
  #enable_correction: true
  preedit_format:
  enable_charset_filter: true

reverse_lookup:
  dictionary: flypy_chars_yxm
  enable_completion: true
  prefix: "`"
  suffix: "$"
  tips: 〔小鹤音形〕

punctuator:
  import_preset: default

key_binder:
  import_preset: default
  bindings:
    #- { when: composing, accept: Tab, send: '[' } ## 取消注释后：tab引导辅助码
    - { when: composing, accept: Control+m, send: Return }
    - { when: composing, accept: Control+w, send: Control+BackSpace }
    - { when: has_menu,  accept: semicolon, send: 2 }
    - { when: has_menu,  accept: apostrophe, send: 3 } ## 单引号用于第3候选
    - { when: composing, accept: Control+i, send: Shift+Right }
    - { when: composing, accept: Control+o, send: Shift+Left }
    # - { when: has_menu,  accept: slash,     send: 3 }
    # - { when: composing, accept: bracketleft, send: "[" } ## tab引导辅助码
      ## 对以下4行取消注释后：启用光标回退至特定音节后、补充辅助码的功能
      ## （自然码等其他双拼用户请在 pinyin_switch.yaml 中设置）
      #- { when: composing, accept: Control+1, send_sequence: '{Home}{Shift+Right}[' }
      #- { when: composing, accept: Control+2, send_sequence: '{Home}{Shift+Right}{Shift+Right}[' }
      #- { when: composing, accept: Control+3, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}[' }
      #- { when: composing, accept: Control+4, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}[' }


recognizer:
  import_preset: default
  patterns:
    reverse_lookup: "[a-z`]*`+[a-z`]*"

menu:
  page_size: 4 #候选项数
  
style:
  horizontal: false #竖排为false

