# Rime schema
# encoding: utf-8

schema:
  schema_id: flypy_xhfast
  name: 飞鹤快拼
  version: "1.0"
  author:
    - boomker
  description: |
    小鹤双拼+辅助码
  dependencies:
    - melt_eng          # 英文单词&词组 - 简明英汉词典(增强版)
    - easy_en
    - flypy_radical
    - flypy_phrase      # 中文词库 - 现代汉语词典 & 清华开源词库
    # - stroke

switches:
  - name: ascii_mode
    states: [中文, 西文]
    reset: 0
  - name: ascii_punct
    states: [。, .]
    reset: 0
  - name: emoji
    states: [🈚️, 🈶]
    reset: 1
  - name: full_shape
    states: [半角, 全角]
    reset: 0
  - name: simplification
    states: [漢字, 汉字]
    reset: 1
  - name: extended_charset
    states: [通用, 增廣]
    reset: 1
  - name: charset_comment
    states: [码区提示关, 码区提示开]
    reset: 0

engine:
  processors:
    - lua_processor@pin_word_processor
    - lua_processor@launcher_processor
    - lua_processor@pair_symbols_processor
    - lua_processor@select_char_processor
    - lua_processor@idiom_expand_processor
    - lua_processor@cold_word_drop_processor
    - lua_processor@flypy_switcher_processor
    - lua_processor@word_append_space_processor
    - lua_processor@word_autocommit_processor
    - ascii_composer
    - recognizer
    - key_binder
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor
    - abc_segmentor
    - matcher
    - affix_segmentor@make_sentence
    - affix_segmentor@chinese_number
    - affix_segmentor@easy_en
    - affix_segmentor@laTeX_formula
    - affix_segmentor@flypy_key_help
    - affix_segmentor@radical_lookup
    - punct_segmentor
    - fallback_segmentor
  translators:
    - punct_translator
    - reverse_lookup_translator
    - table_translator@custom_phrase
    - table_translator@idiom_phrase
    - table_translator@melt_eng
    - table_translator@make_sentence                  # ` 精准造词
    - table_translator@radical_lookup                 # ~ 触发进入部件组字模式
    - table_translator@flypy_key_help                 # /ok 触发进入双拼键位帮助
    - table_translator@easy_en                        # /oe 触发进入英文输入模式
    - lua_translator@pin_word_translator              # 自定义置顶词
    - script_translator
    - lua_translator@flypy_help_translator            # /oh 触发进入帮助菜单
    - lua_translator@lunar_translator                 # /nl 触发显示农历
    - lua_translator@datetime_translator              # date, week, time, /wd, /wk, /wt 触发
    - lua_translator@launcher_translator              # /jj, /fj 触发快捷命令(可改触发前缀)
    - lua_translator@laTex_translator                 # /lt 触发 LaTeX 输入
    - lua_translator@number_translator                # /cn 触发繁体大写金额数字
    - lua_translator@commit_history_translator        # /hs 触发显示上屏历史
    - lua_translator@idiom_expand_translator          # /,0 置于输入码末尾触发简拼展开
    - lua_translator@word_custom_translator           # ] 置于输入码末尾触发自定义单词入库
    - lua_translator@word_autocaps_translator         # A-Z 大写字母开头触发单词自动大写
    - lua_translator@word_autocommit_translator       # [ 单字全码和部分成语短语自动触发
  filters:
    - simplifier
    - simplifier@simplification
    - simplifier@emoji
    - lua_filter@fly_fixed_filter
    - lua_filter@word_autocaps_filter
    - lua_filter@charset_filter
    - lua_filter@charset_comment_filter
    - lua_filter@word_append_space_filter
    - lua_filter@emoji_reduce_filter
    - lua_filter@cold_word_drop_filter
    - lua_filter@word_autocommit_filter
    - lua_filter@long_word_up_filter
    - lua_filter@pin_word_filter
    - lua_filter@launcher_filter
    - reverse_lookup_filter@radical_reverse_lookup
    - uniquifier                                      #  只能放到最后!

speller:
  alphabet: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA[_/]
  initials: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA
  delimiter: " '"
  algebra:
    - erase/^ng\[kk$/            # 取消「唔 ng」的独占
    - erase/^ng\[kx$/            # 取消「嗯 ng」的独占
    - erase/^n\[\w+$/            # 取消「嗯 n」的独占
    - erase/^m\[\w+$/            # 取消「呒 m」的独占
    - erase/^m\[\w+$/            # 取消「呣 m」的独占

    ## 字库编码到输入码的转换规则
    - derive/^(\w+)\[(\w)(\w)$/$1\[$2$3/        # Flypy: AB[CD
    - derive/^(\w+)\[(\w)(\w)$/$1\[$2/          # Flypy: AB[C
    - derive/^(\w+)\[(\w)(\w)$/$1/              # Flypy: AB

    # 响应` 造词
    - derive/^(\w+)\[(\w)(\w)$/$1`$2$3/        # Flypy: AB`CD
    - derive/^(\w+)\[(\w)(\w)$/$1`$2/          # Flypy: AB`C

    # 超级简拼, 开启后可能性能不佳, 视情况开启
    # 输入4个或更多以下字符，按下`0`触发超级简拼
    - abbrev/^(.).+$/$1/
  ## 左右并击飞键音码规则, 注释以下三行使用原版小鹤双拼
  __patch:
    algebra/+:
      __include: flypy_chord_rule:/patch/speller/algebra

grammar:
  language: zh-hans-t-essay-bgw

translator:
  dictionary: flypy_xhfast
  enable_user_dict: true
  encode_commit_history: true       # 上屏历史记录
  contextual_suggestions: true      # 开启八股文, 上下文联想
  sentence_over_completion: true
  # enable_encoder: true
  # max_homophones: 7
  initial_quality: 1.3
  spelling_hints: 1                 # `0`: 关闭单字编码提示
  comment_format:
    - xform/^\w+[[](\w+)$/~$1/      ## 单字编码提示只显示辅助码部分
    - xform/^~\w+\s.*$//            ## 单字编码提示只显示辅助码部分

make_sentence:
  __include: /translator            # 复用上面的翻译器, 日志 warning 可忽略
  enable_sentence: true
  prefix: '`'
  tips: "〔精准造词〕"
  tag: make_sentence

custom_phrase:                      # 自定义短语, 包含固顶字
  dictionary: ""
  user_dict: custom_phrase
  db_class: stabledb
  enable_completion: false
  enable_sentence: false
  initial_quality: 9

idiom_phrase:                       # 成语, 俗语缩写, 实现简拼
  dictionary: ""
  user_dict: idiom_phrase
  db_class: stabledb
  enable_completion: false
  enable_sentence: false
  initial_quality: 0.8

melt_eng:                           # 英文单词
  enable_encoder: false
  encode_commit_history: false
  enable_sentence: false
  enable_completion: true           # 是否启用英文输入联想补全
  enable_user_dict: false
  dictionary: melt_eng
  initial_quality: 1.1
  comment_format:
    - erase/^.*$//

flypy_phrase:
  enable_encoder: false
  encode_commit_history: false
  enable_sentence: false
  enable_user_dict: false
  enable_completion: true
  dictionary: flypy_phrase
  initial_quality: -1

punctuator:
  import_preset: symbols
  full_shape:
    __include: default:/punctuator/full_shape         # 从 default.yaml 导入配置
  half_shape:
    # __include: default:/punctuator/half_shape         # 从 default.yaml 导入配置
    ",": {commit: "，"}
    ".": {commit: "。"}
    # ";": {commit: "；"}         ## 取消注释后, 下行添加注释, 以恢复默认分号
    ";": [";", "；"]
    '"': {pair: ['‘', '’']}      ## 添加注释后：恢复默认引号
    "'": {pair: ['“', '”']}      ## 添加注释后：恢复默认引号
    "<": [《, "<", ‹, 〈, «, ⟨, ˂, ˱]
    ">": [》, ">", ›, 〉, », ⟩, ˃, ˲]
    "/": ["/", ／, ÷]
    '\': [、, '\', ＼]
    "|": [·, ・, "|", ｜, "§", "¦", "‖", ︴]
    "`": ["`", "```", ‵, ‶, ‷, ′, ″, ‴, ⁗]
    "~": ["~", ～, ˜, ˷, ⸯ, ≈, ≋, ≃, ≅, ≇, ∽, ⋍, ≌, ﹏, ﹋, ﹌, ︴]
    "%": ["%", ％, "°", "℃", ‰, ‱, ℉, ℅, ℆, ℀, ℁, ⅍]
    "$": [￥, "$", "€", "£", "¥", "¢", "¤", ₩]
    "*": ["*", ＊, ·, ・, ×, ※, ❂, ⁂, ☮, ☯, ☣]
    "[": ['[',「, 【, 〔, ［, 〚, 〘]
    "]": [']', 」, 】, 〕, ］, 〛, 〙]
    "{": [『, 〖, ｛]
    "}": [』, 〗, ｝]
    "#": "#"
    "=": "="
    "(": "("
    ")": ")"
    # "@": "@"
  symbols:
    __include: symbols.custom:/symbols

key_binder:
  import_preset: default
  bindings:
    - {when: composing, accept: Control+m, send: Return}
    - {when: composing, accept: Control+o, send: Shift+Left}
    - {when: composing, accept: Control+i, send: Shift+Right}
    - {when: composing, accept: Control+w, send: Control+BackSpace}
    - {when: has_menu,  accept: Control+0, toggle: simplification}
    - {when: has_menu,  accept: Control+period, toggle: ascii_punct}
    - {when: has_menu,  accept: Control+Shift+slash, toggle: emoji}
    - {when: has_menu,  accept: Control+Shift+apostrophe, toggle: charset_comment}
    # - { when: always, accept: Control+1, send_sequence: 'HelloWorld' }

recognizer:
  import_preset: default
  patterns:
    week: "^/wk$"
    time: "^/wt$"
    date: "^(/wd|/rq)$"
    chinese_lunar: "^/nl$"
    history: "^/hs$"
    shortcuts: "^/fj$"
    laTeX_formula: "^/lt(.*)$"
    easy_en: "^/oe[a-z]*$"
    flypy_help: "^/(oh|help)$"
    flypy_key_help: "^/ok[a-z]*$"
    chinese_number: "^/cn[0-9.]*$"
    radical_lookup: "~[a-z]+'?$"            # ~ 引导部件拆字, 使用小鹤双拼编码
    make_sentence: "^[a-z]+[`][a-z`]*$"     # ` 引导精准造词
    punct: "^(/([0-9]0?|[A-Za-z]+))|(;[A-Za-z]+)$"
    url: "^(www[.]|https?:|ftp[.:]|mailto:|file:).*$"

simplification:
  option_name: simplification
  opencc_config: t2s.json
  tips: none
  excluded_types: ["radical_lookup", "chinese_number", "chinese_lunar"]

emoji:
  opencc_config: emoji.json
  option_name: emoji
  tag: emoji
  tags: [ abc ]
  excluded_types: ["history"]

flypy_key_help:
  tag: flypy_key_help
  dictionary: ""
  user_dict: flypy_keymap
  prefix: "/ok"
  tips: "小鹤双拼查键"
  db_class: stabledb
  enable_completion: true
  enable_sentence: false
  initial_quality: 1

easy_en:
  tag: easy_en
  dictionary: easy_en
  enable_completion: true
  enable_sentence: false
  # enable_user_dict: false
  prefix: "/oe"
  suffix: "'"
  tips: "英文输入"
  spelling_hints: 9
  comment_format:
    - xform/^.+$//

radical_reverse_lookup:
  tag: radical_reverse_lookup
  overwrite_comment: false
  # dictionary: flypy_xhfast
  dictionary: kMandarin
  comment_format:
    - xform/^(\w+)[[].*$/$1/
    - xform/^/~/

radical_lookup:
  tag: radical_lookup
  dictionary: flypy_radical
  enable_completion: true
  enable_sentence: false
  enable_user_dict: false
  prefix: '~'
  suffix: "'"
  tips: 〔部件组字〕
  comment_format:
    - erase/^.*$//
  preedit_format:
  # - xlit/hspnz/一丨丿丶乙/

history:                      # 上屏历史记录
  tips: "上屏历史"
  tag: history
  prefix: "/hs"
  size: 30
  history_num_max: 30
  initial_quality: 1000
  excluded_types: ["punct"]

pin_word:                     # 词条置顶配置
  pin_word_key: "Control+t"   # 词条置顶快捷键, 优先级高于`key_binder`全局配置
  word_quality: 1000
  comment_mark: "🔝"          # 不能留空
  excluded_types: ["flypy_key_help", "easy_en", "radical_lookup"]