# Rime schem
# Rime schema
# encoding: utf-8

schema:
  schema_id: flypy_xhfast
  name: 飞鹤快拼
  version: "0.1"
  author:
    - Functoreality
  description: |
    小鹤双拼+辅助码
  dependencies:
    - stroke
    - emoji
    # - flypy_yxm     # 中文词库 - 现代汉语词典 & 清华开源词库
    - melt_eng      # 英文单词&词组 - 简明英汉词典（增强版）

switches:
  - name: ascii_mode
    reset: 0
    states: [ 中文, 西文 ]
  - name: emoji
    reset: 1
    states: [ "No", "Yes" ]
  - name: full_shape
    states: [ 半角, 全角 ]
  - name: simplification
    reset: 1
    states: [ 漢字, 汉字 ]
  - name: ascii_punct
    states: [ 。，, ．， ]
  - options: ["utf8", "gbk", "gb2312"] # (※2)字符集选单
    reset: 0 # 默认 UTF8
    states:
      - UTF-8
      - GBK
      - GB2312

engine:
  processors:
    - lua_processor@select_char_processor
    - lua_processor@word_turndown_processor
    - ascii_composer
    - recognizer
    - key_binder
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - punct_segmentor
    - affix_segmentor@emojis
    - affix_segmentor@soft_capslock
    - affix_segmentor@dbpy_flypy_help
    - affix_segmentor@easy_en_simp
    - affix_segmentor@tex_translator
    - fallback_segmentor
  translators:
    - punct_translator
    - table_translator@custom_phrase
    - table_translator@idiom_phrase
    - reverse_lookup_translator
    - script_translator
    - table_translator@emojis
    - table_translator@soft_capslock
    - table_translator@dbpy_flypy_help
    - table_translator@easy_en_simp     # 添加注释后：停用单词输入
    - table_translator@melt_eng
    # - table_translator@flypy_yxm
    - lua_translator@datetime_translator
    - lua_translator@tex_translator
  filters:
    - lua_filter@charset_filter
    - lua_filter@engword_autocaps_filter
    - lua_filter@long_word_up_filter
    - lua_filter@top_word_autocommit_filter
    - lua_filter@word_turndown_filter
    - simplifier
    - simplifier@emoji                  # Emoji
    # - simplifier@simplification
    - uniquifier

speller:
  alphabet: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA_[
  initials: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA_[
  delimiter: " '"
  # max_code_length: 5
  # auto_select: true
  # auto_select_pattern: '^\w+\[\w{2}$'
  ## speller 未允许 aj 表示 an
  algebra:
    - erase/^ng\[kx$/   # 响应超级简拼，取消「嗯 ng」的独占
    - erase/^n\[\w+$/   # 响应超级简拼，取消「嗯 n」的独占
    - erase/^m\[\w+$/   # 响应超级简拼，取消「呒 m」的独占
    - erase/^m\[\w+$/   # 响应超级简拼，取消「呣 m」的独占
    #- xform/[[]// ## 取消注释后：直接引导辅助码
    # - derive/^(..).+$/$1/
    # - derive/^(..[[].).+$/$1/

    - derive/^(\w+)\[(\w)(\w)$/$1\[$2$3/    # Flypy: AB[CD
    - derive/^(\w+)\[(\w)(\w)$/$1\[$2/      # Flypy: AB[C
    # - derive/^(\w+)\[(\w)(\w)$/$1$2$3/      # Flypy: Aabyx/AZZyZx/AZAyZy
    - derive/^(\w+)\[(\w)(\w)$/$1/          # Flypy: AB

    - derive/^(j)n/$1c/
    - derive/^([jyn])t/$1d/                              # t --> d
    - derive/^([bjlmnx])p/$1e/                           # p --> e
    - derive/^([djlnx])q/$1f/                            # q --> f
    - derive/^q([biklmnrsxy])/f$1/
    - derive/^qq/fz/
    - derive/^qu/fs/
    - derive/^qp/fe/
    - derive/^qt/fd/
    - derive/^([td])p/dl/                              # [td]p --> dl
    - derive/^p([okifuhjbnm])/e$1/                     # pk --> ek
    - derive/^pb/ek/
    - derive/^pc/ev/                                   # pc --> ev
    - derive/^pd/ef/                                   # pd --> ef
    - derive/^pg/ey/                                   # pg --> ey
    - derive/^pw/es/                                   # pw --> es
    - derive/^([jk])y/$1w/                             # [jk]y --> [jk]w
    - derive/^y([ik])/w$1/                             # y[ik] --> w[ik]
    - derive/^yj/wn/
    - derive/^tk/rk/
    - derive/^t([wy])/dw/                              # t[wy] --> dw
    - derive/^t([er])/df/                              # t[er] --> df
    - derive/^rg/rd/
    - derive/^xt/xd/
    - derive/^xl/xh/
    - derive/^bh/sb/
    - derive/^b([fgnm])/s$1/                           # b[fgnm] --> s[fgnm]

    - derive/^l([uom])$/n$1/                            # l -> n
    - derive/^n([uom])$/l$1/                            # l -> n
    - derive/^([jqxy])v/$1u/
    - derive/^([jqxy])u/$1v/
    - derive/^(v)([^f])/z$2/                            # zh => z
    - derive/^(i)(.)/c$2/                               # ch => c
    - derive/^(u)([^fgnm])/s$2/                         # sh => s
    - derive/^(z)(.)/v$2/                               # z => zh
    - derive/^(c)(.)/i$2/                               # c => ch
    - derive/^(s)([^fgnm])/u$2/                         # s => sh
    - derive/^([zcviu])f/$1g/                           # [zcs][h]en 可以通过 [zcs][h]eng 打出
    - derive/^([cviu])g/$1f/                            # [zcs][h]eng 可以通过 [zcs][h]en 打出
    - derive/^([typdjxbm])k/$1b/                        # ing 可以通过 in 打出
    - derive/^([typdjxbmn])b/$1k/                       # in 可以通过 ing 打出

grammar:
  language: zh-hans-t-essay-bgw

translator:
  dictionary: flypy_xhfast
  contextual_suggestions: true  # 开启八股文
  initial_quality: 1.2
  spelling_hints: 1 ## 关闭单字编码提示
  comment_format:
    - xform/^\w+[[](\w+)$/~$1/ ## 单字编码提示只显示辅助码部分

  # preedit_format:
    # - "xform/((^|[ '])[bpmfdtnljqx])n/$1iao/"
    # - "xform/((^|[ '])\\w)g/$1eng/"
    # - "xform/((^|[ '])\\w)q/$1iu/"
    # - "xform/((^|[ '])\\w)w/$1ei/"
    # - "xform/((^|[ '])[dtnlgkhjqxyvuirzcs])r/$1uan/"
    # - "xform/((^|[ '])\\w)t/$1ve/"
    # - "xform/((^|[ '])\\w)y/$1un/"
    # - "xform/((^|[ '])[dtnlgkhvuirzcs])o/$1uo/"
    # - "xform/((^|[ '])\\w)p/$1ie/"
    # - "xform/((^|[ '])[jqx])s/$1iong/"
    # - "xform/((^|[ '])\\w)s/$1ong/"
    # - "xform/((^|[ '])\\w)d/$1ai/"
    # - "xform/((^|[ '])\\w)f/$1en/"
    # - "xform/((^|[ '])\\w)h/$1ang/"
    # - "xform/((^|[ '])\\w)j/$1an/"
    # - "xform/((^|[ '])[gkhvuirzcs])k/$1uai/"
    # - "xform/((^|[ '])\\w)k/$1ing/"
    # - "xform/((^|[ '])[jqxnl])l/$1iang/"
    # - "xform/((^|[ '])\\w)l/$1uang/"
    # - "xform/((^|[ '])\\w)z/$1ou/"
    # - "xform/((^|[ '])[gkhvuirzcs])x/$1ua/"
    # - "xform/((^|[ '])\\w)x/$1ia/"
    # - "xform/((^|[ '])\\w)c/$1ao/"
    # - "xform/((^|[ '])[dtgkhvuirzcs])v/$1ui/"
    # - "xform/((^|[ '])\\w)b/$1in/"
    # - "xform/((^|[ '])\\w)m/$1ian/"
    # - "xform/(^|[ '])([aoe])\\2(\\w)/$1$2$3/"
    # - "xform/(^|[ '])v/$1zh/"
    # - "xform/(^|[ '])i/$1ch/"
    # - "xform/(^|[ '])u/$1sh/"
    # - "xform/((^|[ '])[jqxy])v/$1u/"
    # - "xform/((^|[ '])[nl])v/$1ü/"

custom_phrase:
  dictionary: ""
  user_dict: custom_phrase
  db_class: stabledb
  enable_completion: false
  enable_sentence: false
  initial_quality: 2

idiom_phrase:
  dictionary: ""
  user_dict: idiom_phrase
  db_class: stabledb
  enable_completion: false
  enable_sentence: false
  initial_quality: -1

melt_eng:                           # 英文单词
  enable_encoder: false
  encode_commit_history: false
  enable_sentence: false
  enable_completion: true         # 是否启用英文输入联想补全
  enable_user_dict: false
  dictionary: melt_eng
  initial_quality: 1.1

flypy_yxm:                     # 小鹤音形-短语，支持自动补全, 词库源自现代汉语词典
  enable_encoder: false
  encode_commit_history: false
  enable_sentence: false
  enable_user_dict: true
  dictionary: flypy_phrase_yxm
  initial_quality: 1

punctuator:
  import_preset: symbols
  half_shape:
    '@' : [ '@', ＠, ☯ ]
    '<' : [ 《, 〈, «, ‹ ]
    '>' : [ 》, 〉, », › ]
    '"' : { pair: [ '‘', '’' ] } ## 添加注释后：恢复默认引号
    '''' : { pair: [ '“', '”' ] } ## 添加注释后：恢复默认引号
  symbols:
    '/er': [ 二, 貳, ₂, ², Ⅱ, ⅱ, ②, ➁, ❷, ➋, ⓶, ⑵, ⒉, ２, ㊁, ㈡, 弍, 弐, 貮, 㒃, 㒳, 兩, 倆, ㆓]
    '/san': [ 三, 叄, ₃, ³, Ⅲ, ⅲ, ③, ➂, ❸, ➌, ⓷, ⑶, ⒊, ３, ㊂, ㈢, 參, 参, 叁, 弎, 仨, ㆔]
    '/si': [ 四, 肆, ₄, ⁴, Ⅳ, ⅳ, ④, ➃, ❹, ➍, ⓸, ⑷, ⒋, ４, ㊃, ㈣, 亖]
    '/zb': [┌, └, ┐, ┘, ─, │, ├, ┤, ┬, ┴, ┼, ┏, ┗, ┓, ┛, ━, ┃, ┣, ┫, ┳, ┻, ╋] ## 制表符

key_binder:
  import_preset: default
  select_first_character: 'comma'
  select_last_character: 'bracketright'
  turn_down_cand: "Control+j"
  bindings:
    #- { when: composing, accept: Tab, send: '[' }        ## 取消注释后: tab引导辅助码
    - { when: composing, accept: bracketleft, send: "[" } ## `[`引导辅助码
    - { when: has_menu,  accept: semicolon, send: 2 }
    - { when: has_menu,  accept: apostrophe, send: 3 }    ## 单引号用于第3候选
    - { when: composing, accept: Control+m, send: Return }
    - { when: composing, accept: Control+w, send: Control+BackSpace }
    - { when: composing, accept: Control+i, send: Shift+Right }
    - { when: composing, accept: Control+o, send: Shift+Left }
    ## 对以下4行取消注释后：启用光标回退至特定音节后、补充辅助码的功能
    ## （自然码等其他双拼用户请在 pinyin_switch.yaml 中设置）
    #- { when: composing, accept: Control+1, send_sequence: '{Home}{Shift+Right}[' }
    #- { when: composing, accept: Control+2, send_sequence: '{Home}{Shift+Right}{Shift+Right}[' }
    #- { when: composing, accept: Control+3, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}[' }
    #- { when: composing, accept: Control+4, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}[' }

recognizer:
  # import_preset: default
  patterns:
    uppercase: "^[A-Z]+$"
    punct: '^/[015-9A-Za-z]+$' ## use "/er" instead of "/2"
    ## associate schemes:
    reverse_lookup: "^Oq[a-z]*'?$"
    emojis: "^Oe[a-z]*'?$" # "^oe.*$" 
    soft_capslock: "^Od.*$"
    dbpy_flypy_help: "^Oh.*$"
    easy_en_simp: "^Oz[a-z]*"
    tex_translator: "^/tl(.*)$"

menu:
  page_size: 4

# simplification:
#   option_name: simplification
#   opencc_config: t2s.json
#   tags: abc
#   tips: all
#   excluded_types: [ reverse_lookup ]

# Emoji
emoji:
  opencc_config: emoji.json
  option_name: emoji
  tags: abc

emojis:
  tag: emojis
  dictionary: emoji
  enable_completion: true
  prefix: "Oe"
  suffix: "'"
  tips: " Emoji"
soft_capslock:
  dictionary: ""
  user_dict: uppercase
  tag: soft_capslock
  prefix: "Od"
  tips: "临时大写"
  db_class: stabledb
  enable_completion: false
  enable_sentence: true
  initial_quality: 1
dbpy_flypy_help:
  dictionary: ""
  user_dict: dbpy_flypy_help
  tag: dbpy_flypy_help
  prefix: "Oh"
  tips: "小鹤双拼查键"
  db_class: stabledb
  enable_completion: true
  enable_sentence: false
  initial_quality: 1
easy_en_simp:
  tag: easy_en_simp
  dictionary: melt_eng
  enable_completion: true
  enable_sentence: false
  enable_user_dict: false
  prefix: "Oz"
  # suffix: "'"
  tips: "英文单词(可去元音)"
  spelling_hints: 9
  comment_format:
    - xform/^.+$//
reverse_lookup:
  dictionary: chaizi_flypy # stroke
  enable_completion: true
  prefix: "Oq"
  suffix: "'"
  tips: 〔部件组字〕 # 〔筆畫〕
  preedit_format:
    # - xlit/hspnz/一丨丿丶乙/
tex_translator:
  tag: tex_translator
  prefix: "/tl"
  tips: " TeX 公式"

