# Rime schema
# encoding: utf-8

schema:
  schema_id: flypy_zrmfast
  name: 小鹤快手 # 鹤拼快形 
  version: "0.1"
  author:
    - Functoreality
  description: |
    小鹤双拼，自然快手辅助码
  dependencies:
    - stroke
    # - emoji
    - melt_eng

switches:
  - name: ascii_mode
    reset: 0
    states: [ 中文, 西文 ]
  - name: full_shape
    states: [ 半角, 全角 ]
  - name: simplification
    states: [ 漢字, 汉字 ]
  - name: ascii_punct
    states: [ 。，, ．， ]

engine:
  processors:
    - ascii_composer
    - recognizer
    - key_binder
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - punct_segmentor
    # - affix_segmentor@quanpin
    # - affix_segmentor@emojis
    - affix_segmentor@verbatim ## not as the last of this list
    - affix_segmentor@soft_capslock
    - affix_segmentor@dbpy_flypy_help
    - affix_segmentor@easy_en_simp
    - affix_segmentor@tex_translator
    - fallback_segmentor
  translators:
    - punct_translator
    - table_translator@custom_phrase
    - reverse_lookup_translator
    - script_translator
    # - script_translator@quanpin
    # - table_translator@emojis
    - table_translator@soft_capslock
    - table_translator@dbpy_flypy_help
    - lua_translator@tex_translator
    - lua_translator@date_translator
    - lua_translator@time_translator
    - table_translator@easy_en_simp ## 添加注释后：停用单词输入
  filters:
    - simplifier
    - uniquifier

speller:
  alphabet: zyxwvutsrqponmlkjihgfedcba[
  initials: zyxwvutsrqponmlkjihgfedcba
  delimiter: " '"
  ## speller 未允许 aj 表示 an
  algebra:
    #- xform/[[]// ## 取消注释后：直接引导辅助码
    - erase/^ng\[kx$/   # 响应超级简拼，取消「嗯 ng」的独占
    - erase/^n\[\w+$/   # 响应超级简拼，取消「嗯 n」的独占
    - erase/^m\[\w+$/   # 响应超级简拼，取消「呒 m」的独占
    - erase/^m\[\w+$/   # 响应超级简拼，取消「呣 m」的独占
    #- xform/[[]// ## 取消注释后：直接引导辅助码
    # - derive/^(..).+$/$1/
    # - derive/^(..[[].).+$/$1/
    - derive/^(\w+)\[(\w)(\w)$/$1\[$2$3/    # Flypy: ABCD
    - derive/^(\w+)\[(\w)(\w)$/$1\[$2/      # Flypy: ABC
    - derive/^(\w+)\[(\w)(\w)$/$1/
    - derive/^([jqxy])v/$1u/
    - derive/^([jqxy])u/$1v/
    - derive/^(j)n/$1c/

    - derive/^l/n/                     # l -> n
    - derive/^n/l/                     # n -> l

    - derive/^(v)(.)/z$2/               # zh => z
    - derive/^(i)(.)/c$2/               # ch => c
    - derive/^(u)(.)/s$2/               # sh => s
    - derive/^(z)(.)/v$2/               # z => zh
    - derive/^(c)(.)/i$2/               # c => ch
    - derive/^(s)(.)/u$2/               # s => sh
    - derive/^([zcsviu])f/$1g/          # [zcs][h]en 可以通过 [zcs][h]eng 打出
    - derive/^([zcsviu])g/$1f/          # [zcs][h]eng 可以通过 [zcs][h]en 打出
    - derive/^([qtypdjlxbnm])k/$1b/     # ing 可以通过 in 打出
    - derive/^(.)b/$1k/                 # in 可以通过 ing 打出
    - abbrev/^([wkif]).+$/$1/   # 超级简拼

translator:
  dictionary: flypy_zrmfast
  spelling_hints: 1
  # enable_user_dict: true
  # preedit_format:
    # - "xform/((^|[ '])[bpmfdtnljqx])n/$1iao/"
    # - "xform/((^|[ '])\\w)g/$1eng/"
    # - "xform/((^|[ '])\\w)q/$1iu/"
    # - "xform/((^|[ '])\\w)w/$1ei/"
    # - "xform/((^|[ '])[dtnlgkhjqxyvuirzcs])r/$1uan/"
    # - "xform/((^|[ '])\\w)t/$1ve/"
    # - "xform/((^|[ '])\\w)y/$1un/"
    # - "xform/((^|[ '])[dtnlgkhvuirzcs])o/$1uo/"
    # - "xform/((^|[ '])\\w)p/$1ie/"
    # - "xform/((^|[ '])[jqx])s/$1iong/"
    # - "xform/((^|[ '])\\w)s/$1ong/"
    # - "xform/((^|[ '])\\w)d/$1ai/"
    # - "xform/((^|[ '])\\w)f/$1en/"
    # - "xform/((^|[ '])\\w)h/$1ang/"
    # - "xform/((^|[ '])\\w)j/$1an/"
    # - "xform/((^|[ '])[gkhvuirzcs])k/$1uai/"
    # - "xform/((^|[ '])\\w)k/$1ing/"
    # - "xform/((^|[ '])[jqxnl])l/$1iang/"
    # - "xform/((^|[ '])\\w)l/$1uang/"
    # - "xform/((^|[ '])\\w)z/$1ou/"
    # - "xform/((^|[ '])[gkhvuirzcs])x/$1ua/"
    # - "xform/((^|[ '])\\w)x/$1ia/"
    # - "xform/((^|[ '])\\w)c/$1ao/"
    # - "xform/((^|[ '])[dtgkhvuirzcs])v/$1ui/"
    # - "xform/((^|[ '])\\w)b/$1in/"
    # - "xform/((^|[ '])\\w)m/$1ian/"
    # - "xform/(^|[ '])([aoe])\\2(\\w)/$1$2$3/"
    # - "xform/(^|[ '])v/$1zh/"
    # - "xform/(^|[ '])i/$1ch/"
    # - "xform/(^|[ '])u/$1sh/"
    # - "xform/((^|[ '])[jqxy])v/$1u/"
    # - "xform/((^|[ '])[nl])v/$1ü/"

punctuator:
  import_preset: symbols
  half_shape:
    '>' : [》, 〉, '> ', », › ]
    '"' : { pair: [ '‘', '’' ] } ## 添加注释后：恢复默认引号
    '''' : { pair: [ '“', '”' ] } ## 添加注释后：恢复默认引号
  symbols:
    '/er': [ 二, 貳, ₂, ², Ⅱ, ⅱ, ②, ➁, ❷, ➋, ⓶, ⑵, ⒉, ２, ㊁, ㈡, 弍, 弐, 貮, 㒃, 㒳, 兩, 倆, ㆓]
    '/san': [ 三, 叄, ₃, ³, Ⅲ, ⅲ, ③, ➂, ❸, ➌, ⓷, ⑶, ⒊, ３, ㊂, ㈢, 參, 参, 叁, 弎, 仨, ㆔]
    '/si': [ 四, 肆, ₄, ⁴, Ⅳ, ⅳ, ④, ➃, ❹, ➍, ⓸, ⑷, ⒋, ４, ㊃, ㈣, 亖]
    '/zb': [┌, └, ┐, ┘, ─, │, ├, ┤, ┬, ┴, ┼, ┏, ┗, ┓, ┛, ━, ┃, ┣, ┫, ┳, ┻, ╋] ## 制表符

key_binder:
  import_preset: default
  bindings:
    #- { when: composing, accept: Tab, send: '[' } ## 取消注释后：tab引导辅助码
    - { when: composing, accept: Control+m, send: Return }
    - { when: composing, accept: Control+w, send: Control+BackSpace }
    - { when: has_menu, accept: semicolon, send: 2 }
    - { when: has_menu, accept: slash, send: 3 }
    - { when: composing, accept: Control+i, send: Shift+Right }
    - { when: composing, accept: Control+o, send: Shift+Left }
    ## 对以下4行取消注释后：启用光标回退至特定音节后、补充辅助码的功能
    ## （自然码等其他双拼用户请在 pinyin_switch.yaml 中设置）
    #- { when: composing, accept: Control+1, send_sequence: '{Home}{Shift+Right}[' }
    #- { when: composing, accept: Control+2, send_sequence: '{Home}{Shift+Right}{Shift+Right}[' }
    #- { when: composing, accept: Control+3, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}[' }
    #- { when: composing, accept: Control+4, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}[' }

recognizer:
  # import_preset: default
  patterns:
    uppercase: "^[A-Z].*$"
    punct: '^/[015-9A-Za-z]+$' ## use "/er" instead of "/2"
    ## associate schemes: 

    # quanpin: "^oq[a-z]*'?$"
    reverse_lookup: "^or[a-z]*'?$" # "[[]b[a-z]*'?$"
    # emojis: "^oe[a-z]*'?$" # "^oe.*$" 
    verbatim: "^ox.*$"
    soft_capslock: "^od.*$"
    dbpy_flypy_help: "^oh.*$"
    easy_en_simp: "^ow[a-z]*"
    tex_translator: "^of(.*)$"

menu:
  page_size: 4

custom_phrase:
  dictionary: ""
  user_dict: custom_phrase
  db_class: stabledb
  enable_completion: false
  enable_sentence: false
  initial_quality: 1

reverse_lookup:
  dictionary: chaizi_flypy # stroke
  enable_completion: true
  prefix: "or"
  suffix: "'"
  tips: 〔部件组字〕 # 〔筆畫〕
  preedit_format:
    # - xlit/hspnz/一丨丿丶乙/

quanpin:
  tag: quanpin
  dictionary: rime_ice ## 用户可自行改为扩展后的词典
  prism: luna_pinyin
  enable_completion: true
  prefix: "oq"
  suffix: "'"
  tips: "全拼"
emojis:
  tag: emojis
  dictionary: emoji
  enable_completion: true
  prefix: "oe"
  suffix: "'"
  tips: " Emoji"
verbatim:
  tag: verbatim ## english; ascii
  prefix: "ox"
  tips: "cii"
soft_capslock:
  dictionary: ""
  user_dict: uppercase
  tag: soft_capslock
  prefix: "od"
  tips: "临时大写"
  db_class: stabledb
  enable_completion: false
  enable_sentence: true
  initial_quality: 1
dbpy_flypy_help:
  dictionary: ""
  user_dict: dbpy_flypy_help
  tag: dbpy_flypy_help
  prefix: "oh"
  tips: "小鹤双拼查键"
  db_class: stabledb
  enable_completion: true
  enable_sentence: false
  initial_quality: 1
easy_en_simp:
  tag: easy_en_simp
  dictionary: melt_eng
  enable_completion: true
  enable_sentence: false
  prefix: "ow"
  # suffix: "'"
  tips: "英文单词（可去元音）"
  spelling_hints: 9
  comment_format:
    - xform/^.+$//
tex_translator:
  tag: tex_translator
  prefix: "of"
  tips: " TeX 公式"

