##  一些常用的设置项, 找到需要进行的设置所在的行,
##  取消注释 (删除行开头的单个 # 符号) 即可启用该设置项.
##  注意不要删除前面的空格, YAML 文件的缩进比较严格, 缩进不对容易报错.

patch:
  switches/+:
    - name: prediction
      states: [联想关, 联想开]
      reset: 0
  # 'engine/processors/@before 0': predictor
  "engine/translators/@before 0": predict_translator
  engine/+:
    processors/+:
    translators/+:
    filters/+:
  menu/page_size: 7               # 自定义候选项个数

  key_binder/+:
    select_first_character: "minus"
    select_last_character:  "equal"
    pin_cand:  "Control+t"        # 候选词置顶
    drop_cand: "Control+d"        # 强制删词, 无视输入的编码
    hide_cand: "Control+x"        # 匹配当前输入码后隐藏指定的候选字词
    turn_down_cand: "Control+j"   # 匹配当前输入码后降频指定的候选字词
    switch_comment: "Control+n"   # 切换注释类型(小鹤形码 / 带调拼音 / 无)
    bindings/+:
      - {when: has_menu,  accept: semicolon, send: 2}
      - {when: has_menu,  accept: apostrophe, send: 3}       ## 单引号用于第3候选
      # - {when: paging,  accept: comma, send: Page_Up}      ## 逗号返回上一页
      - {when: has_menu,  accept: period, send: Page_Down}
      - {when: composing, accept: Control+k, send: Shift+Delete}
      - {when: composing, accept: Control+e, send: End}
      - {when: composing, accept: Tab, send: Shift+Right}
      - {when: composing, accept: bracketleft, send: "["}   ## [引导辅助码
      # - { when: composing, accept: grave, send: '`' }     ## 取消注释后: `引导辅助码
      # `键 (grave, Tab 上面那个) 为词组逐字追加辅助码.
      # 可将 grave 改成 Tab, Control+Tab, bracketright(] 键).
      # 如果希望无论有无 [ 均可引导, 取消下行注释, 放到当前文件`algebra`节点下
      # speller/algebra/@next: derive/[[]//

  speller/+:
    algebra/+:
      ## 模糊音:
      - derive/^([jqxy])v/$1u/
      - derive/^([jqxy])u/$1v/
      # - derive/^l([uom])$/n$1/                  # l => n
      # - derive/^(v)([^fg])/z$2/                 # zh => z
      # - derive/^(i)([^fg])/c$2/                 # ch => c
      # - derive/^(u)([^bfgnm])/s$2/              # sh => s
      - derive/^(u)([h])/s$2/                     # uh => sh
      # - derive/^n([uo])$/l$1/                   # n => l
      - derive/^(z)([^acdefghijklmnsu])/v$2/      # z => zh
      - derive/^(c)([^acdefghijklmsuo])/i$2/      # c => ch
      - derive/^(s)([^abcdefghijklmnu])/u$2/      # s => sh
      # - derive/^(i)f/$1g/                       # [zcs][h]en => [zcs][h]eng
      - derive/^(i)g/$1f/                         # [zcs][h]eng => [zcs][h]en
      - derive/^([ypdbn])b/$1k/                   # in => ing
      # - derive/^([typdjxbm])k/$1b/              # ing => in

  long_word_up_config:
    # 长词升频到第 idx 个位置
    idx: 3
    excluded_type: [ "date", "rq", "week", "time", "lunar" ]

  cold_wold_reduce_config:
    # 生僻词条降频到第 idx 个位置
    idx: 4

  emoji_reduce_config:
    # Emoji 降频到第 idx 个位置
    idx: 6

  predictor:
    db: predict.db
    max_candidates: 2
    max_iterations: 2
