##  一些常用的设置项。找到需要进行的设置所在的行，
##  取消注释（删除行开头的单个 # 符号）即可启用该设置项。
##  注意不要删除前面的空格，YAML 文件的缩进比较严格，缩进不对容易报错。
patch:
  engine/+:
    translators/+:
     # - lua_translator@*user_dict
    filters/+:

  # engine/translators/@last: '' ## 禁用英文单词输入功能
  # punctuator/half_shape: {} ## 恢复默认引号
  menu/page_size: 5 ## 自定义候选项个数
  key_binder/+:
    select_first_character: 'comma'
    select_last_character: 'bracketright'
    drop_cand: "Control+d"        # 强制删词, 无视输入的编码
    hide_cand: "Control+x"        # 匹配当前输入码后隐藏指定的候选字词
    turn_down_cand: "Control+j"   # 匹配当前输入码后降频指定的候选字词

    bindings/+:
      # - { when: composing, accept: Tab, send: '[' }         ## tab引导辅助码
      # - { when: composing, accept: comma, send: '[' }       ## 逗号引导辅助码，常用于手机端
      - { when: has_menu,  accept: apostrophe,  send: 3 }     ## 单引号用于第3候选
      - { when: has_menu,  accept: period, send: Page_Down }
      - { when: composing, accept: bracketleft, send: "[" }   ## tab引导辅助码
      - { when: composing, accept: Tab, send: Shift+Right }
      - { when: composing, accept: Control+k, send: Shift+Delete }
      - { when: composing, accept: Control+e, send: End }
      - { when: composing, accept: Control+a,   send_sequence: '{Home}{Right}{Right}[' }
      - { when: composing, accept: Right,       send_sequence: "{Right}{Right}" }
      # - { when: composing, accept: grave, send_sequence: '{Right}{Right}{Shift+Left}{Right}{Right}[' }
      # `键（grave, Tab 上面那个）为词组逐字追加辅助码.
      # 可将 grave 改成 Tab, Control+Tab, bracketright(] 键).

  ##  直接引导辅助码(改用自然码等其他双拼方案的用户请在 pinyin_switch.yaml 中设置)
  ##  如果希望无论有无 [ 均可引导，取消注释的同时将 xform 改成 derive
  # speller/algebra/@next: derive/[[]//

  translator/dictionary: flypy_xhfast       ## 使用小鹤原版辅助码
  # translator/prism: flypy_flypy           ## 使用小鹤原版辅助码
  # translator/contextual_suggestions: true
  # translator/max_homophones: 7
  speller/+:
    algebra/+:
      ## 模糊音:
      - derive/^([jqxy])v/$1u/
      - derive/^([jqxy])u/$1v/
      # - derive/^l([uom])$/n$1/          # l -> n
      # - derive/^(v)([^fg])/z$2/         # zh => z
      # - derive/^(i)([^fg])/c$2/         # ch => c
      # - derive/^(u)([^bfgnm])/s$2/      # sh => s
      - derive/^n([uo])$/l$1/             # n -> l
      - derive/^(z)([^acdefghijk])/v$2/     # z => zh
      - derive/^(c)([^acdefghij])/i$2/      # c => ch
      - derive/^(s)([^abcdefgjknm])/u$2/    # s => sh
      # - derive/^(i)k/c$2/               # ch => c
      - derive/^(i)f/$1g/                 # [zcs][h]en 可以通过 [zcs][h]eng 打出
      - derive/^(i)g/$1f/                 # [zcs][h]eng 可以通过 [zcs][h]en 打出
      - derive/^([typdxbn])b/$1k/         # in 可以通过 ing 打出
      # - derive/^([typdjxbm])k/$1b/      # ing 可以通过 in 打出
